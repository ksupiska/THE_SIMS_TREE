// src/pages/SimCreateForm.tsx
import React, { useEffect, useState } from 'react';

import axios from 'axios';

import '../css/simform.css';

import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';

import 'bootstrap/dist/css/bootstrap.min.css';
import 'C:/Users/kspiska/Desktop/DIPLOM/family-tree/node_modules/bootstrap-icons/font/bootstrap-icons.css';

import CharacterDetail from '../components/CharacterDetail';


interface Human {
    id: number;
    name: string;
    surname: string;
    sex: string;
    avatar?: string;
    city_living: string;
    state_of_life: string;
    cause_of_death?: string;
    kind: string;
    type: string;
}


const SimCreateForm = () => {
    const [selectedCharacterId, setSelectedCharacterId] = useState<number | null>(null);


    const [name, setName] = useState('');
    const [surname, setSurname] = useState('');
    const [sex, setSex] = useState('');
    const [city_living, setCity] = useState('');
    const [state_of_life, setStateOfLife] = useState('');
    const [cause_of_death, setCauseOfDeath] = useState('');
    const [kind, setKind] = useState('');
    const [type, setType] = useState('');
    const [avatar, setAvatar] = useState<File | null>(null);
    const [members, setMembers] = useState<Human[]>([]);


    const fetchPersonalities = async () => {
        try {
            const response = await axios.get('http://localhost:3001/personalities');
            setMembers(response.data);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
        }
    };

    useEffect(() => {
        fetchPersonalities();
    }, []);

    const handleSubmit = async (e: React.FormEvent) => {

        e.preventDefault();

        try {
            const formData = new FormData();
            formData.append('name', name);
            formData.append('surname', surname);
            formData.append('sex', sex);
            formData.append('city_living', city_living);
            formData.append('state_of_life', state_of_life);
            formData.append('cause_of_death', cause_of_death);
            formData.append('kind', kind);
            formData.append('type', type);
            if (avatar) {
                formData.append('avatar', avatar);
            }

            await axios.post('http://localhost:3001/personalities', formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
            });

            setName('');
            setSurname('');
            setSex('');
            setCity('');
            setStateOfLife('');
            setCauseOfDeath('');
            setKind('');
            setType('');
            setAvatar(null);

            fetchPersonalities();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
        }
    };

    const handleDelete = async (id: number) => {
        try {
            await axios.delete(`http://localhost:3001/personalities/${id}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            await fetchPersonalities();
            setSelectedCharacterId(null); // –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è detail ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
        }
    };


    return <div>

        <div className='sims-form-container'>
            <div className="sims-plumbob"></div>

            <Form onSubmit={handleSubmit} className="sims-form">
                <h2 className="sims-form-title">
                    <span className="sims-green">–°–æ–∑–¥–∞–Ω–∏–µ</span> <span className="sims-blue">–ø–µ—Ä—Å–æ–Ω–∞–∂–∞</span>
                </h2>

                <div className="form-grid">
                    {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                    <div className="form-column">
                        <Form.Group className='mb-4 sims-form-group'>
                            <Form.Label className="sims-label">–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä</Form.Label>
                            <div className="sims-file-input">
                                <Form.Control
                                    type='file'
                                    onChange={(e) => {
                                        const file = (e.target as HTMLInputElement).files?.[0] || null;
                                        setAvatar(file);
                                    }}
                                    className="sims-input"
                                />
                                <div className="sims-file-preview">
                                    {avatar ? (
                                        <img src={URL.createObjectURL(avatar)} alt="Avatar preview" className="sims-avatar-preview" />
                                    ) : (
                                        <div className="sims-avatar-placeholder">üë§</div>
                                    )}
                                </div>
                            </div>
                        </Form.Group>

                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicName'>
                            <Form.Label className="sims-label">–ò–º—è</Form.Label>
                            <Form.Control
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                type='text'
                                placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è'
                                required
                                className="sims-input"
                            />
                        </Form.Group>

                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicSurname'>
                            <Form.Label className="sims-label">–§–∞–º–∏–ª–∏—è</Form.Label>
                            <Form.Control
                                value={surname}
                                onChange={(e) => setSurname(e.target.value)}
                                type='text'
                                placeholder='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'
                                required
                                className="sims-input"
                            />
                        </Form.Group>
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                    <div className="form-column">
                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicSex'>
                            <Form.Label className="sims-label">–ü–æ–ª</Form.Label>
                            <div className="sims-radio-group">
                                <label className="sims-radio">
                                    <input
                                        type="radio"
                                        value="–ú—É–∂—Å–∫–æ–π"
                                        checked={sex === "–ú—É–∂—Å–∫–æ–π"}
                                        onChange={(e) => setSex(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark"></span>
                                    –ú—É–∂—Å–∫–æ–π
                                </label>
                                <label className="sims-radio">
                                    <input
                                        type="radio"
                                        value="–ñ–µ–Ω—Å–∫–∏–π"
                                        checked={sex === "–ñ–µ–Ω—Å–∫–∏–π"}
                                        onChange={(e) => setSex(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark"></span>
                                    –ñ–µ–Ω—Å–∫–∏–π
                                </label>
                            </div>
                        </Form.Group>

                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicType'>
                            <Form.Label className="sims-label">–§–æ—Ä–º–∞ –∂–∏–∑–Ω–∏</Form.Label>
                            <div className="sims-radio-group2">
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–ß–µ–ª–æ–≤–µ–∫"
                                        checked={type === "–ß–µ–ª–æ–≤–µ–∫"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –ß–µ–ª–æ–≤–µ–∫
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–í–∞–º–ø–∏—Ä"
                                        checked={type === "–í–∞–º–ø–∏—Ä"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –í–∞–º–ø–∏—Ä
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–†—É—Å–∞–ª–∫–∞"
                                        checked={type === "–†—É—Å–∞–ª–∫–∞"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –†—É—Å–∞–ª–∫–∞
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–ß–∞—Ä–æ–¥–µ–π"
                                        checked={type === "–ß–∞—Ä–æ–¥–µ–π"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –ß–∞—Ä–æ–¥–µ–π
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–ü—Ä–∏—à–µ–ª–µ—Ü"
                                        checked={type === "–ü—Ä–∏—à–µ–ª–µ—Ü"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –ü—Ä–∏—à–µ–ª–µ—Ü
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–ü—Ä–∏–∑—Ä–∞–∫"
                                        checked={type === "–ü—Ä–∏–∑—Ä–∞–∫"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –ü—Ä–∏–∑—Ä–∞–∫
                                </label>
                                <label className="sims-radio2">
                                    <input
                                        type="radio"
                                        value="–û–±–æ—Ä–æ—Ç–µ–Ω—å"
                                        checked={type === "–û–±–æ—Ä–æ—Ç–µ–Ω—å"}
                                        onChange={(e) => setType(e.target.value)}
                                    />
                                    <span className="sims-radio-checkmark2"></span>
                                    –û–±–æ—Ä–æ—Ç–µ–Ω—å
                                </label>
                            </div>
                        </Form.Group>

                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicCity'>
                            <Form.Label className="sims-label">–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</Form.Label>
                            <Form.Select
                                value={city_living}
                                onChange={(e) => setCity(e.target.value)}
                                className="sims-select"
                            >
                                <option value="–í–∏–ª–ª–æ—É –ö—Ä–∏–∫">–í–∏–ª–ª–æ—É –ö—Ä–∏–∫</option>
                                <option value="–û–∞–∑–∏—Å –°–ø—Ä–∏–Ω–≥—Å">–û–∞–∑–∏—Å –°–ø—Ä–∏–Ω–≥—Å</option>
                                <option value="–ù—å—é–∫—Ä–µ—Å—Ç">–ù—å—é–∫—Ä–µ—Å—Ç</option>
                                <option value="–ú–∞–≥–Ω–æ–ª–∏—è –ø—Ä–æ–º–µ–Ω–µ–π–¥">–ú–∞–≥–Ω–æ–ª–∏—è –ø—Ä–æ–º–µ–Ω–µ–π–¥</option>
                                <option value="–í–∏–Ω–¥–µ–Ω–±—É—Ä–≥">–í–∏–Ω–¥–µ–Ω–±—É—Ä–≥</option>
                                <option value="–°–∞–Ω –ú–∏—à—É–Ω–æ">–°–∞–Ω –ú–∏—à—É–Ω–æ</option>
                                <option value="–§–æ—Ä–≥–æ—Ç–Ω –•–æ–ª–ª–æ—É">–§–æ—Ä–≥–æ—Ç–Ω –•–æ–ª–ª–æ—É</option>
                                <option value="–ë—Ä–∏–Ω–¥–ª—Ç–æ–Ω-–ë–µ–π">–ë—Ä–∏–Ω–¥–ª—Ç–æ–Ω-–ë–µ–π</option>
                                <option value="–î–µ–ª—å-–°–æ–ª—å-–í—ç–ª–ª–∏">–î–µ–ª—å-–°–æ–ª—å-–í—ç–ª–ª–∏</option>
                                <option value="–°—Ç—Ä–µ–π–Ω–¥–∂–µ—Ä–≤–∏–ª–ª—å">–°—Ç—Ä–µ–π–Ω–¥–∂–µ—Ä–≤–∏–ª–ª—å</option>
                                <option value="–°—É–ª–∞–Ω–∏">–°—É–ª–∞–Ω–∏</option>
                                <option value="–ì–ª–∏–º–º–µ—Ä–±—Ä—É–∫">–ì–ª–∏–º–º–µ—Ä–±—Ä—É–∫</option>
                                <option value="–ë—Ä–∏—Ç—á–µ—Å—Ç–µ—Ä">–ë—Ä–∏—Ç—á–µ—Å—Ç–µ—Ä</option>
                                <option value="–≠–≤–µ—Ä–≥—Ä–∏–Ω-–•–∞—Ä–±–æ—Ä">–≠–≤–µ—Ä–≥—Ä–∏–Ω-–•–∞—Ä–±–æ—Ä</option>
                                <option value="–í—Ä–∞–Ω–±—É—Ä–≥">–í—Ä–∞–Ω–±—É—Ä–≥</option>
                                <option value="–ù–æ—Ä–¥—Ö–∞–≤–µ–Ω">–ù–æ—Ä–¥—Ö–∞–≤–µ–Ω</option>
                                <option value="–°–∏—É—Å–∞–¥-–≠–Ω–∞–º–æ—Ä–∞–¥–∞">–°–∏—É—Å–∞–¥-–≠–Ω–∞–º–æ—Ä–∞–¥–∞</option>
                                <option value="–¢–æ–º–∞—Ä–∞–Ω–≥">–¢–æ–º–∞—Ä–∞–Ω–≥</option>
                                <option value="–°–∞–Ω-–°–µ–∫–≤–æ–π—è">–°–∞–Ω-–°–µ–∫–≤–æ–π—è</option>
                                <option value="–ë–∞—Ç—É—É">–ë–∞—Ç—É—É</option>
                                <option value="–°–µ–ª—å–≤–∞–¥–æ—Ä–∞–¥–∞">–°–µ–ª—å–≤–∞–¥–æ—Ä–∞–¥–∞</option>
                                <option value="–ì–æ—Ä–∞ –ö–æ–º–æ—Ä–µ–±–∏">–ì–æ—Ä–∞ –ö–æ–º–æ—Ä–µ–±–∏</option>
                                <option value="–ì—Ä–∞–Ω–∏—Ç-–§–æ–ª–ª–∑">–ì—Ä–∞–Ω–∏—Ç-–§–æ–ª–ª–∑</option>
                                <option value="–¢–∞—Ä—Ç–æ–∑–∞">–¢–∞—Ä—Ç–æ–∑–∞</option>
                                <option value="–ö–æ–ø–ø–µ—Ä–¥–µ–π–ª">–ö–æ–ø–ø–µ—Ä–¥–µ–π–ª</option>
                                <option value="–•—ç–Ω—Ñ–æ—Ä–¥-–æ–Ω-–ë—ç–≥–ª–∏">–•—ç–Ω—Ñ–æ—Ä–¥-–æ–Ω-–ë—ç–≥–ª–∏</option>
                                <option value="–ú—É–Ω–≤—É–¥ –ú–∏–ª–ª">–ú—É–Ω–≤—É–¥ –ú–∏–ª–ª</option>
                                <option value="–ß–µ—Å—Ç–Ω–∞–¥ –†–∏–¥–∂">–ß–µ—Å—Ç–Ω–∞–¥ –†–∏–¥–∂</option>
                                <option value="–≠–≤–µ—Ä–≥—Ä–∏–Ω –•–∞—Ä–±–æ—Ä">–≠–≤–µ—Ä–≥—Ä–∏–Ω –•–∞—Ä–±–æ—Ä</option>
                            </Form.Select>
                        </Form.Group>

                        <Form.Group className='mb-4 sims-form-group' controlId='formBasicState'>
                            <Form.Label className="sims-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</Form.Label>
                            <Form.Select
                                value={state_of_life}
                                onChange={(e) => setStateOfLife(e.target.value)}
                                required
                                className="sims-select"
                            >
                                <option value="–ñ–∏–≤">–ñ–∏–≤</option>
                                <option value="–ú–µ—Ä—Ç–≤">–ú–µ—Ä—Ç–≤</option>
                            </Form.Select>
                        </Form.Group>
                    </div>
                </div>

                <Form.Group className='mb-4 sims-form-group' controlId='formBasicKind'>
                    <Form.Label className="sims-label">–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</Form.Label>
                    <Form.Control
                        value={kind}
                        onChange={(e) => setKind(e.target.value)}
                        type='text'
                        placeholder='–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞'
                        required
                        className="sims-input"
                    />
                    <div className="sims-traits-hint">–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–±—Ä—ã–π, –í–µ—Å—ë–ª—ã–π, –ì–µ–Ω–∏–π</div>
                </Form.Group>

                {state_of_life === "–ú–µ—Ä—Ç–≤" && (
                    <Form.Group className='mb-4 sims-form-group' controlId='formBasicDeath'>
                        <Form.Label className="sims-label">–ü—Ä–∏—á–∏–Ω–∞ —Å–º–µ—Ä—Ç–∏</Form.Label>
                        <Form.Control
                            value={cause_of_death}
                            onChange={(e) => setCauseOfDeath(e.target.value)}
                            type='text'
                            placeholder='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–º–µ—Ä—Ç–∏'
                            className="sims-input"
                        />
                    </Form.Group>
                )}


                <Button type="submit" className="sims-submit-btn">
                    <span className="sims-btn-icon">‚úì</span>
                    <span className="sims-btn-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</span>
                </Button>
            </Form>
        </div>
        <div className='mt-4 text'>
            <h3 className='mb-4 text-center'>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</h3>
            {!selectedCharacterId ? (
                <div className='d-flex flex-wrap justify-content-center gap-4'>
                    {members.map((member) => (
                        <div
                            key={member.id}
                            className='d-flex flex-column align-items-center'
                            style={{ width: '120px', cursor: 'pointer' }}
                            onClick={() => setSelectedCharacterId(member.id)}
                        >
                            <div className='position-relative'>
                                {member.avatar && (
                                    <img
                                        src={`http://localhost:3001${member.avatar}`}
                                        alt='avatar'
                                        className='rounded-circle object-fit-cover shadow'
                                        width={100}
                                        height={100}
                                    />
                                )}
                                <div className='position-absolute bottom-0 end-0 bg-primary rounded-circle p-1 border border-2 border-white'></div>
                            </div>
                            <div className='mt-2 text-center'>
                                <div className='fw-semibold'>{member.name}</div>
                                <div className='text-muted small'>{member.surname}</div>
                            </div>
                        </div>
                    ))}
                </div>
            ) : (
                <div className="mt-4">
                    <Button variant="secondary" className="mb-3" onClick={() => setSelectedCharacterId(null)}>
                        –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                    </Button>

                    <CharacterDetail
                        character={members.find((m) => m.id === selectedCharacterId)!}
                        onDelete={handleDelete}
                    />
                </div>

            )}

        </div>
    </div>;
};

export default SimCreateForm;


{/*  */ }