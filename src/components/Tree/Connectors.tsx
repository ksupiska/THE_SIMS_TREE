import React, { JSX } from "react";

import { TbCirclesRelation } from "react-icons/tb"; //married –∂–µ–Ω–∞—Ç—ã
import { LiaRingSolid } from "react-icons/lia";//divorced –≤ —Ä–∞–∑–≤–æ–¥–µ
import { GiBigDiamondRing } from "react-icons/gi"; //engaged –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã
import { BsChatHeart } from "react-icons/bs";//flirting —Ñ–ª–∏—Ä—Ç
import { FaHeartBroken } from "react-icons/fa";//former –±—ã–≤—à–∏–µ
import { FaHeart } from "react-icons/fa";//partner –ø–∞—Ä—Ç–Ω–µ—Ä
import { GiHeartWings } from "react-icons/gi"; //widow –≤–¥–æ–≤—Ü—ã
import { FaUserFriends } from "react-icons/fa"; //friends –¥—Ä—É–∑—å—è


type NodeType = {
    id: number;
    partnerId?: number;
    parentId?: number;
    x: number;
    y: number;
    partnerType?: 'married' | 'divorced' | 'engaged' | 'flirting' | 'former' | 'partner' | 'widow' | 'friends';//–∂–µ–Ω–∞—Ç—ã, –≤ —Ä–∞–∑–≤–æ–¥–µ, –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã, —Ñ–ª–∏—Ä—Ç, –±—ã–≤—à–∏–µ, –ø–∞—Ä—Ç–Ω–µ—Ä, –≤–¥–æ–≤–∞(–≤–¥–æ–≤–µ—Ü), –¥—Ä—É–∑—å—è
};

type ConnectorsProps = {
    nodes: NodeType[];
};

const NODE_WIDTH = 100;
const NODE_HEIGHT = 100;
//const PARTNER_GAP = 60;
const VERTICAL_GAP = 100;

const Connectors: React.FC<ConnectorsProps> = ({ nodes }) => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —É–∑–ª–∞
    const findPartner = (node: NodeType) =>
        node.partnerId !== undefined
            ? nodes.find((n) => n.id === node.partnerId)
            : nodes.find((n) => n.partnerId === node.id);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –ø–æ –ø–∞—Ä–∞–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–∫–ª—é—á ‚Äî id —Ä–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä—ã)
    // –ß—Ç–æ–±—ã —É –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–µ–π –ø–∞—Ä—ã
    const childrenByParents: Record<number, NodeType[]> = {};

    nodes.forEach((node) => {
        if (node.parentId !== undefined) {
            if (!childrenByParents[node.parentId]) childrenByParents[node.parentId] = [];
            childrenByParents[node.parentId].push(node);
        }
    });

    const connectors: JSX.Element[] = [];

    // –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏
    // üîó 1. –õ–∏–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å -> –¥–µ—Ç–∏
    nodes.forEach((node) => {
        const partner = findPartner(node);

        // –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–∏–Ω–∏–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è "—Å—Ç–∞—Ä—à–µ–≥–æ" —É–∑–ª–∞ –ø–∞—Ä—ã
        if (partner && partner.id < node.id) return;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π –ø–∞—Ä—ã
        let children: NodeType[] = [];

        if (partner) {
            const children1 = childrenByParents[node.id] || [];
            const children2 = childrenByParents[partner.id] || [];
            children = [...children1, ...children2];
        } else {
            children = childrenByParents[node.id] || [];
        }

        if (children.length === 0) return;

        const parentsCenterX = partner
            ? (node.x + NODE_WIDTH / 2 + partner.x + NODE_WIDTH / 2) / 2
            : node.x + NODE_WIDTH / 2;
        const parentsBottomY = node.y + NODE_HEIGHT;

        if (children.length === 1) {
            const child = children[0];
            const childCenterX = child.x + NODE_WIDTH / 2;
            const childTopY = child.y;
            const verticalStep = 20;

            connectors.push(
                <polyline
                    key={`connector-${node.id}-${child.id}`}
                    points={`
                        ${parentsCenterX},${parentsBottomY} 
                        ${parentsCenterX},${parentsBottomY + verticalStep} 
                        ${childCenterX},${parentsBottomY + verticalStep} 
                        ${childCenterX},${childTopY}
                    `}
                    fill="none"
                    stroke="black"
                    strokeWidth={2}
                />
            );
        } else {
            const childLeftX = Math.min(...children.map((c) => c.x + NODE_WIDTH / 2));
            const childRightX = Math.max(...children.map((c) => c.x + NODE_WIDTH / 2));
            const childrenLineY = parentsBottomY + VERTICAL_GAP / 2;

            connectors.push(
                <line
                    key={`connector-vert-${node.id}`}
                    x1={parentsCenterX}
                    y1={parentsBottomY}
                    x2={parentsCenterX}
                    y2={childrenLineY}
                    stroke="black"
                    strokeWidth={2}
                />
            );

            connectors.push(
                <line
                    key={`connector-horiz-${node.id}`}
                    x1={childLeftX}
                    y1={childrenLineY}
                    x2={childRightX}
                    y2={childrenLineY}
                    stroke="black"
                    strokeWidth={2}
                />
            );

            children.forEach((child) => {
                const childCenterX = child.x + NODE_WIDTH / 2;
                const childTopY = child.y;

                connectors.push(
                    <line
                        key={`connector-child-${node.id}-${child.id}`}
                        x1={childCenterX}
                        y1={childrenLineY}
                        x2={childCenterX}
                        y2={childTopY}
                        stroke="black"
                        strokeWidth={2}
                    />
                );
            });
        }
    });

    // üíû 2. –ò–∫–æ–Ω–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞
    nodes.forEach((node) => {
        const partner = findPartner(node);
        if (!partner || partner.id < node.id) return;

        const x = (node.x + NODE_WIDTH / 2 + partner.x + NODE_WIDTH / 2) / 2;
        const y = (node.y + NODE_HEIGHT / 2 + partner.y + NODE_HEIGHT / 2) / 2;

        let icon: JSX.Element | null = null;
        switch (node.partnerType) {
            case "married":
                icon = <TbCirclesRelation color="#8a8a8a" />;
                break;
            case "divorced":
                icon = <LiaRingSolid color="#8a8a8a" />;
                break;
            case "engaged":
                icon = <GiBigDiamondRing color="#8a8a8a" />;
                break;
            case "flirting":
                icon = <BsChatHeart color="#8a8a8a" />
                break;
            case "former":
                icon = <FaHeartBroken color="#8a8a8a" />
                break;
            case "partner":
                icon = <FaHeart color="#8a8a8a" />
                break;
            case "widow":
                icon = <GiHeartWings color="#8a8a8a" />
                break;
            case "friends":
                icon = <FaUserFriends color="#8a8a8a" />
                break;

        }

        if (icon) {
            connectors.push(
                <foreignObject
                    key={`partner-icon-${node.id}-${partner.id}`}
                    x={x - 16}
                    y={y - 16}
                    width={32}
                    height={32}
                >
                    <div style={{
                        width: 32,
                        height: 32,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        fontSize: 20  // —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ fontSize)
                    }}>
                        {icon}
                    </div>
                </foreignObject>


            );
        }
    });

    return (
        <svg
            style={{ position: "absolute", top: 0, left: 0, width: "100%", height: "100%", zIndex: 0 }}
            pointerEvents="none"
        >
            {connectors}
        </svg>
    );
};

export default Connectors;
